// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/routes/v1/route.proto

package com.google.maps.routes.v1;

public interface RouteTravelAdvisoryOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.maps.routes.v1.RouteTravelAdvisory)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The traffic restriction that applies to the route. A vehicle that is
   * subject to the restriction is not allowed to travel on the route. As of
   * October 2019, only Jakarta, Indonesia takes into consideration.
   * </pre>
   *
   * <code>.google.maps.routes.v1.TrafficRestriction traffic_restriction = 1;</code>
   * @return Whether the trafficRestriction field is set.
   */
  boolean hasTrafficRestriction();
  /**
   * <pre>
   * The traffic restriction that applies to the route. A vehicle that is
   * subject to the restriction is not allowed to travel on the route. As of
   * October 2019, only Jakarta, Indonesia takes into consideration.
   * </pre>
   *
   * <code>.google.maps.routes.v1.TrafficRestriction traffic_restriction = 1;</code>
   * @return The trafficRestriction.
   */
  com.google.maps.routes.v1.TrafficRestriction getTrafficRestriction();
  /**
   * <pre>
   * The traffic restriction that applies to the route. A vehicle that is
   * subject to the restriction is not allowed to travel on the route. As of
   * October 2019, only Jakarta, Indonesia takes into consideration.
   * </pre>
   *
   * <code>.google.maps.routes.v1.TrafficRestriction traffic_restriction = 1;</code>
   */
  com.google.maps.routes.v1.TrafficRestrictionOrBuilder getTrafficRestrictionOrBuilder();

  /**
   * <pre>
   * Encapsulates information about tolls on the Route.
   * This field is only populated if we expect there are tolls on the Route.
   * If this field is set but the estimated_price subfield is not populated,
   * we expect that road contains tolls but we do not know an estimated price.
   * If this field is not set, then we expect there is no toll on the Route.
   * </pre>
   *
   * <code>.google.maps.routes.v1.TollInfo toll_info = 2;</code>
   * @return Whether the tollInfo field is set.
   */
  boolean hasTollInfo();
  /**
   * <pre>
   * Encapsulates information about tolls on the Route.
   * This field is only populated if we expect there are tolls on the Route.
   * If this field is set but the estimated_price subfield is not populated,
   * we expect that road contains tolls but we do not know an estimated price.
   * If this field is not set, then we expect there is no toll on the Route.
   * </pre>
   *
   * <code>.google.maps.routes.v1.TollInfo toll_info = 2;</code>
   * @return The tollInfo.
   */
  com.google.maps.routes.v1.TollInfo getTollInfo();
  /**
   * <pre>
   * Encapsulates information about tolls on the Route.
   * This field is only populated if we expect there are tolls on the Route.
   * If this field is set but the estimated_price subfield is not populated,
   * we expect that road contains tolls but we do not know an estimated price.
   * If this field is not set, then we expect there is no toll on the Route.
   * </pre>
   *
   * <code>.google.maps.routes.v1.TollInfo toll_info = 2;</code>
   */
  com.google.maps.routes.v1.TollInfoOrBuilder getTollInfoOrBuilder();

  /**
   * <pre>
   * Speed reading intervals detailing traffic density. Applicable in case of
   * TRAFFIC_AWARE and TRAFFIC_AWARE_OPTIMAL routing preferences.
   * The intervals cover the entire polyline of the route without overlaps, i.e.
   * the start point of a given interval coincides with the end point of the
   * preceding interval.
   * Example:
   *   polyline: A ---- B ---- C ---- D ---- E ---- F ---- G
   *   speed_reading_intervals: [A,C),  [C,D), [D,G).
   * </pre>
   *
   * <code>repeated .google.maps.routes.v1.SpeedReadingInterval speed_reading_intervals = 3;</code>
   */
  java.util.List<com.google.maps.routes.v1.SpeedReadingInterval> 
      getSpeedReadingIntervalsList();
  /**
   * <pre>
   * Speed reading intervals detailing traffic density. Applicable in case of
   * TRAFFIC_AWARE and TRAFFIC_AWARE_OPTIMAL routing preferences.
   * The intervals cover the entire polyline of the route without overlaps, i.e.
   * the start point of a given interval coincides with the end point of the
   * preceding interval.
   * Example:
   *   polyline: A ---- B ---- C ---- D ---- E ---- F ---- G
   *   speed_reading_intervals: [A,C),  [C,D), [D,G).
   * </pre>
   *
   * <code>repeated .google.maps.routes.v1.SpeedReadingInterval speed_reading_intervals = 3;</code>
   */
  com.google.maps.routes.v1.SpeedReadingInterval getSpeedReadingIntervals(int index);
  /**
   * <pre>
   * Speed reading intervals detailing traffic density. Applicable in case of
   * TRAFFIC_AWARE and TRAFFIC_AWARE_OPTIMAL routing preferences.
   * The intervals cover the entire polyline of the route without overlaps, i.e.
   * the start point of a given interval coincides with the end point of the
   * preceding interval.
   * Example:
   *   polyline: A ---- B ---- C ---- D ---- E ---- F ---- G
   *   speed_reading_intervals: [A,C),  [C,D), [D,G).
   * </pre>
   *
   * <code>repeated .google.maps.routes.v1.SpeedReadingInterval speed_reading_intervals = 3;</code>
   */
  int getSpeedReadingIntervalsCount();
  /**
   * <pre>
   * Speed reading intervals detailing traffic density. Applicable in case of
   * TRAFFIC_AWARE and TRAFFIC_AWARE_OPTIMAL routing preferences.
   * The intervals cover the entire polyline of the route without overlaps, i.e.
   * the start point of a given interval coincides with the end point of the
   * preceding interval.
   * Example:
   *   polyline: A ---- B ---- C ---- D ---- E ---- F ---- G
   *   speed_reading_intervals: [A,C),  [C,D), [D,G).
   * </pre>
   *
   * <code>repeated .google.maps.routes.v1.SpeedReadingInterval speed_reading_intervals = 3;</code>
   */
  java.util.List<? extends com.google.maps.routes.v1.SpeedReadingIntervalOrBuilder> 
      getSpeedReadingIntervalsOrBuilderList();
  /**
   * <pre>
   * Speed reading intervals detailing traffic density. Applicable in case of
   * TRAFFIC_AWARE and TRAFFIC_AWARE_OPTIMAL routing preferences.
   * The intervals cover the entire polyline of the route without overlaps, i.e.
   * the start point of a given interval coincides with the end point of the
   * preceding interval.
   * Example:
   *   polyline: A ---- B ---- C ---- D ---- E ---- F ---- G
   *   speed_reading_intervals: [A,C),  [C,D), [D,G).
   * </pre>
   *
   * <code>repeated .google.maps.routes.v1.SpeedReadingInterval speed_reading_intervals = 3;</code>
   */
  com.google.maps.routes.v1.SpeedReadingIntervalOrBuilder getSpeedReadingIntervalsOrBuilder(
      int index);
}
